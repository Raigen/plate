{"version":3,"file":"index.js","sources":["../src/createNullUser.ts","../src/createThreadPlugin.ts","../src/transforms/deleteThread.ts","../src/transforms/deleteThreadAtSelection.ts","../src/findSelectedThreadNodeEntry.ts","../src/isThread.ts","../src/transforms/wrapWithThread.ts","../src/transforms/upsertThread.ts","../src/transforms/deselectThread.ts","../src/transforms/selectThread.ts","../src/transforms/upsertThreadAtSelection.ts","../src/findThreadNodeEntries.ts","../src/Thread.ts","../src/generateThreadLink.ts","../src/Contact.ts"],"sourcesContent":["import { User } from './User';\n\nexport function createNullUser(): User {\n  return { id: '', name: '' };\n}\n","import { createPluginFactory, PlateEditor } from '@udecode/plate-core';\nimport { deselectThread } from './transforms/deselectThread';\nimport { selectThread } from './transforms/selectThread';\nimport { findSelectedThreadNodeEntry } from './findSelectedThreadNodeEntry';\nimport { findThreadNodeEntries } from './findThreadNodeEntries';\nimport { ThreadPlugin } from './types';\n\nexport const ELEMENT_THREAD = 'thread';\n\nexport const createThreadPlugin = createPluginFactory<ThreadPlugin>({\n  key: ELEMENT_THREAD,\n  isElement: true,\n  isInline: true,\n  handlers: {\n    onChange(editor: PlateEditor<{}>) {\n      return () => {\n        // const threadNodeEntries = findThreadNodeEntries(editor);\n        // for (const threadNodeEntry of threadNodeEntries) {\n        //   deselectThread(editor, threadNodeEntry);\n        // }\n        //\n        // const threadNodeEntry = findSelectedThreadNodeEntry(editor);\n        // if (threadNodeEntry) {\n        //   const { thread } = threadNodeEntry[0];\n        //   if (thread) {\n        //     selectThread(editor, threadNodeEntry);\n        //   }\n        // }\n      };\n    },\n  },\n});\n","import { getPluginType, PlateEditor, unwrapNodes } from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { ELEMENT_THREAD } from '../createThreadPlugin';\n\nexport function deleteThread<T = {}>(editor: PlateEditor<T>, thread: Location) {\n  unwrapNodes(editor, {\n    at: thread,\n    match: { type: getPluginType(editor, ELEMENT_THREAD) },\n  });\n}\n","import { getPluginType, PlateEditor, unwrapNodes } from '@udecode/plate-core';\nimport { ELEMENT_THREAD } from '../createThreadPlugin';\n\nexport function deleteThreadAtSelection<T = {}>(editor: PlateEditor<T>) {\n  unwrapNodes(editor, {\n    at: editor.selection!,\n    match: { type: getPluginType(editor, ELEMENT_THREAD) },\n  });\n}\n","import { getAbove, getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { ELEMENT_THREAD } from './createThreadPlugin';\nimport { ThreadNode } from './types';\n\nexport function findSelectedThreadNodeEntry<T = {}>(\n  editor: PlateEditor<T>\n): NodeEntry<ThreadNode> | undefined {\n  return getAbove(editor, {\n    match: { type: getPluginType(editor, ELEMENT_THREAD) },\n  }) as NodeEntry<ThreadNode> | undefined;\n}\n","import { getPluginType, PlateEditor, TNode } from '@udecode/plate-core';\nimport { ELEMENT_THREAD } from './createThreadPlugin';\nimport { ThreadNode } from './types';\n\nexport function isThread<T>(\n  editor: PlateEditor<T>,\n  node: TNode\n): node is ThreadNode {\n  return node.type === getPluginType(editor, ELEMENT_THREAD);\n}\n","import { getPluginType, PlateEditor, wrapNodes } from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { ELEMENT_THREAD } from '../createThreadPlugin';\nimport { Thread } from '../Thread';\nimport { ThreadNodeData } from '../types';\n\nexport const wrapWithThread = <T = {}>(\n  editor: PlateEditor<T>,\n  {\n    at,\n    thread,\n    elementProps,\n  }: { thread: Thread; at?: Location; elementProps?: Partial<ThreadNodeData> }\n) => {\n  wrapNodes(\n    editor,\n    {\n      type: getPluginType(editor, ELEMENT_THREAD),\n      thread,\n      selected: false,\n      children: [],\n      ...elementProps,\n    },\n    { at, split: true }\n  );\n};\n","import {\n  findNode,\n  getPluginType,\n  isCollapsed,\n  PlateEditor,\n  unwrapNodes,\n} from '@udecode/plate-core';\nimport { Editor, Location, Range, Transforms } from 'slate';\nimport { ELEMENT_THREAD } from '../createThreadPlugin';\nimport { findSelectedThreadNodeEntry } from '../findSelectedThreadNodeEntry';\nimport { isThread } from '../isThread';\nimport { Thread } from '../Thread';\nimport { ThreadNodeData } from '../types';\nimport { wrapWithThread } from './wrapWithThread';\n\nexport function upsertThread<T = {}>(\n  editor: PlateEditor<T>,\n  {\n    at,\n    thread,\n    elementProps,\n  }: { thread: Thread; at: Location; elementProps?: Partial<ThreadNodeData> }\n): any {\n  const type = getPluginType(editor, ELEMENT_THREAD);\n  const isRange = Range.isRange(at);\n\n  if (isRange && isCollapsed(at as Range)) {\n    const threadLeaf = Editor.leaf(editor, at);\n    const [, inlinePath] = threadLeaf;\n    Transforms.select(editor, inlinePath);\n  }\n\n  wrapWithThread(editor, { at, thread, elementProps });\n  unwrapNodes(editor, { at, match: { type } });\n\n  if (isRange) {\n    const threadNodeEntry = findNode(editor, {\n      at: [],\n      match(node: any) {\n        return isThread(editor, node) && node.thread.id === thread.id;\n      },\n    });\n    const [, threadPath] = threadNodeEntry!;\n\n    Transforms.select(editor, threadPath);\n  }\n\n  return findSelectedThreadNodeEntry(editor);\n}\n","import { PlateEditor } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { ThreadNode } from '../types';\nimport { upsertThread } from './upsertThread';\n\nexport function deselectThread(\n  editor: PlateEditor,\n  threadEntry: NodeEntry<ThreadNode>\n) {\n  const [threadNode, threadPath] = threadEntry;\n  if (threadNode.selected) {\n    upsertThread(editor, {\n      thread: threadNode.thread,\n      at: threadPath,\n      elementProps: { selected: false },\n    });\n  }\n}\n","import { PlateEditor } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { ThreadNode } from '../types';\nimport { upsertThread } from './upsertThread';\n\nexport function selectThread(\n  editor: PlateEditor,\n  threadEntry: NodeEntry<ThreadNode>\n) {\n  const [threadNode, threadPath] = threadEntry;\n  if (!threadNode.selected) {\n    upsertThread(editor, {\n      thread: threadNode.thread,\n      at: threadPath,\n      elementProps: { selected: true },\n    });\n  }\n}\n","import { PlateEditor } from '@udecode/plate-core';\nimport { Thread } from '../Thread';\nimport { upsertThread } from './upsertThread';\n\nexport const upsertThreadAtSelection = <T = {}>(\n  editor: PlateEditor<T>,\n  thread: Thread\n): any => {\n  const { selection } = editor;\n  if (selection) {\n    return upsertThread(editor, { thread, at: selection });\n  }\n};\n","import { getNodes, getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { ELEMENT_THREAD } from './createThreadPlugin';\n\nexport function* findThreadNodeEntries<T = {}>(\n  editor: PlateEditor<T>\n): Generator<NodeEntry<any>, void, undefined> {\n  const type = getPluginType(editor, ELEMENT_THREAD);\n  yield* getNodes(editor, {\n    at: [],\n    match: { type },\n  });\n}\n","import { Comment } from './Comment';\nimport { User } from './User';\n\nexport interface Thread {\n  id: any;\n  comments: Comment[];\n  isResolved: boolean;\n  createdBy: User;\n}\n\nexport function isFirstComment(thread: Thread, comment: Comment): boolean {\n  return thread.comments.indexOf(comment) === 0;\n}\n","import { Thread } from './Thread';\n\nexport function generateThreadLink(thread: Thread) {\n  const url = new URL(window.location.href);\n  url.searchParams.set('thread', thread.id);\n  return url.toString();\n}\n","export interface Contact {\n  name: string;\n  email: string;\n  avatarUrl: string;\n}\n\nexport function doesContactMatchString(\n  matchString: string,\n  contact: Contact\n): boolean {\n  return (\n    contact.name.startsWith(matchString) ||\n    contact.email.startsWith(matchString)\n  );\n}\n"],"names":["createNullUser","id","name","ELEMENT_THREAD","createThreadPlugin","createPluginFactory","key","isElement","isInline","handlers","onChange","editor","deleteThread","thread","unwrapNodes","at","match","type","getPluginType","deleteThreadAtSelection","selection","findSelectedThreadNodeEntry","getAbove","isThread","node","wrapWithThread","elementProps","wrapNodes","selected","children","split","upsertThread","isRange","Range","isCollapsed","threadLeaf","Editor","leaf","inlinePath","Transforms","select","threadNodeEntry","findNode","threadPath","deselectThread","threadEntry","threadNode","selectThread","upsertThreadAtSelection","findThreadNodeEntries","getNodes","isFirstComment","comment","comments","indexOf","generateThreadLink","url","URL","window","location","href","searchParams","set","toString","doesContactMatchString","matchString","contact","startsWith","email"],"mappings":"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"}